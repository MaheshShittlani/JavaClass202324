What is the Looping?
---------------------------------------
Looping is a process or Method to repeat a block of code for finite number of times.

System.out.println("Hello");
System.out.println("Hello");
System.out.println("Hello");
System.out.println("Hello");
System.out.println("Hello");

        OR
Repeat 
    System.out.println("Hello");
for 100 times

Part of loop
----------------------
    1. Initialization
    2. Condition
    3. Statement(s)
    4. Updates

How loop executes?
-------------------
Inside the loop, there is a condition - Until the condition remains true loop executes as soon as condition becomes false loop terminates. 

If loop executes N time, then condition check N+1 times as N time condition remains true and loop exeutes. In (N+1)th time condition becomes false and loop terminates.

1. Entry control loop
    a) Condition check first and if condition becomes true the statements are exeucutes.
    b) If condition fails for the first time, then no statement will be executed inside the loop.
    c) If loop executes N time, then condition check N+1 times.
    d) while, for loop
2. Exit control loop
    a) For the first time the loop staments are executed without checking the condition.
    b) If condition becomes false for the first time, then loop executes atleast once.
    c) If loop rotate for N times, then condition test will be N time.
    d) do-while loop.

while loop syntax
-----------------------
 initilization; // 1
 while(condition) // 2,4,6 
 {
    statement-1;
    statement-2;       // Body of loop (3,5)
    statement-3;
 }

Example:
--------------
    i = 1;
    while(i <= 10) {
        System.out.println("Hello");
        i++;
    }

-------------------------------------------
Exercise:
-------------------------------------------
1. Input any number and count the number of digits in the number.
    Ex: 345, Number of digits = 3
2. Input any number and find the factorial of the number.
    Ex: 5 , Factorial = 120
3. Input any number, and find the sum of digits
    Ex:
        Enter any number: 123
        Sum of Digits = 6
4. Guess the number:
    Generate a random number between 1 to 100
    Input the guess from the user
        - If guess is correct - then print "You guess the correct number in x attempt".
        - If guess > number, then "Your guess is too high"
        - If guess < number, then "Your guess is too low".

    Exit the program when user guess the correct number.

Exercise:
---------------
1   0   1   0   1   0   ....N terms
1   -1  1   -1  1   -1      ....N terms
1   -3  5   -7  9   -11 13  -15 N terms
1   11  111 1111    11111       Nterms

Lottery
-------------
1. Generate a 2 digit random number
    Input the guess from the user for the lottery.
        - It number is exact match, then User wins 10000/-
        - If any both of the digits match, then User wins 5000/-
        - If one one digit match, then user wins 2000/-
        - Otherwise User lost the game.

Exercise
----------------------------------
1. Reverse a number
2. Check a number is palindrome or not.
    Ex: 121, 1331
3. Check a number is armstrong or not.
    153 -> 1^3 + 5 ^3 + 3 ^ 3

For loop
---------------
syntax
------------
        1               2,5,8           4,7
    for(initilization; condition; updates) 
    {
        statement-1;
        statement-2;           // Body of loop (3,6)
        statement-3;
    }

Example:
    for(int i = 1; i <= 10; i++) {
        System.out.println(i);
    }

    int i = 1;
    for( ; i <= 10; i++) {
        System.out.println(i);
    }

    int i = 1;
    for( ; i <= 10; ) {
        System.out.println(i);
        i++;
    }

Note: Intitalization and update section are optional to write in the for loop

int term = 1;
for(int i = 1; i <= 10; i++) {
    System.out.println(term);
    term += 2;
}

for(int i = 1, term = 1; i <= 10; i++) {
    System.out.print(term + " ");
    term += 2;
}

for(int i = 1, term = 1; i <= 10; i++, term += 2) {
    System.out.print(term + " ");
}

Note: In for loop, initilization and update section can contains multiple statements.

// Infinite Loop
for(; ;) {

}

// Error
while() {

}

// Infinite loop
while(true) {

}

int i = 1;
while(true) {
    if(i > 10) {
        break;
    }
    System.out.println(i);
    i++;
}
------------------------------------------
int i = 5;

for(i > 1; i++; i==6) {
    System.out.println(i);
}
------------------------------
do-while loop
------------------------------------
syntax
------------

initilization; // 1

do 
{
    statement-1;
    statement-2;    // body of loop (2,3)
    statement-3;
} 
while(condition); // 3, 4

- do-while loop executes atleast once
- Condition check N time if loop executes n times.

---------------------------------------------------

Example:
----------
int i = 1;
do {
    System.out.print(i);
    i++;
} while(i <= 10);
// 1 2 3 4 5 6 7 8 9 10


int i = 1;
do {
    System.out.println(i);
    i++;
} while (i < 1);

// 1

-----------------------------------------------------
Nested Loops
-----------------------------------------------------

1 2 3 4 5 6 7 8 9 10
2 4 6 8 10 12 16 18 20
3 6 9 12 15 18 21 24 27 30


for(int number = 1; number <= 10; number++) {
    for(int i = 1; i <= 10; i++) {
        System.out.print(number * i+" ");
    }
    System.out.println();
}

----------------------------------------------------
Q1)

(Business: check ISBN-10) 
An ISBN-10 (International Standard Book Number) consists of 10 digits: d1d2d3d4d5d6d7d8d9d10. 
The last digit, d10, is a checksum, which is calculated from the other 9 digits using the following formula:
 (d1 * 1 + d2 * 2 + d3 * 3 + d4 * 4 + d5 * 5 +
 d6 * 6 + d7 * 7 + d8 * 8 + d9 * 9)%11
 If the checksum is 10, the last digit is denoted as X according to the ISBN-10 convention. 
 Write a program that prompts the user to enter the first 9 digits and displays the 10-digit ISBN (including leading zeros). Your program should read the input as an integer.
 Q2)

 (Financial: credit card number validation) Credit card numbers follow certain patterns. A credit card number must have between 13 and 16 digits. It must start 
with
 ■ 4 for Visa cards
 ■ 5 for Master cards
 ■ 37 for American Express cards
 ■ 6 for Discover cards

 In 1954, Hans Luhn of IBM proposed an algorithm for validating credit card numbers. The algorithm is useful to determine whether a card number is entered correctly, or whether a credit card is scanned correctly by a scanner. Credit card numbers are generated following this validity check, commonly known as the Luhn check or the Mod 10 check, which can be described as follows (for illustration, consider the card number 4388576018402626):
2*2 + 2*2 + 4*2
1. Double every second digit from right to left. If doubling of a digit results in a two-digit number, add up the two digits to get a single-digit number.

2.  Now add all single-digit numbers from Step 1.
3.  Add all digits in the odd places from right to left in the card number.
4. Sum the results from Step 2 and Step 3.
6. If the result from Step 4 is divisible by 10, the card number is valid; otherwise, 
it is invalid. For example, the number 4388576018402626 is invalid, but the 
number 4388576018410707 is valid.

7.Write a program that prompts the user to enter a credit card number as a long 
integer. Display whether the number is valid or invalid. Design your program to 
use the following methods: