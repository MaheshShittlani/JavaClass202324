1. Java is a programming language which is developed by `James Gosling` and Team in `Sun Microsystems`.
2. Java Team
    - James Gosling
    - Ed Frank
    - Mike Sheriden
    - Chris Worth
    - Patrick Naughton
3. Java is used to develop a rich set of application including desktop application, web application, mobile application and Network based application.

4. Desktop Application - are those which can be run on a single pc or standalone pc.
    - Microsoft word
    - Paint Brush
    - Google Chrome
    - Photoshop

5. Web Application - are those which are running over the server and can be accessed  by anyone through the internet.
    - Google Docs
    - Photopea
6. Mobile Application - are those application which is specially created for the mobiles.
    - Facebook app
    - Youtube app
7. Java is created under a green project for consumer related goods software in mind.
8. Intially java was named as `OAK` and later renamed with `JAVA`.
9. Before 1990's the applications are developed in C/ C++. and these applications are platform dependent.

10. How C / C++ application works?

    Hello.c             ---->   Compiler     ---> Hello.obj / Hello.o  ---> Linker -> Hello.exe
    (Source Code)                                   (Object Code)

Windows
-----------------
    printf("Hello World");  

        |

    show("Hello World");


Linux
---------------
    printf("Hello World");
            |
    display("Hello World");

11. C / C++ -> `Write Once & Compile Anywhere` (But Generally it is not happening as we have to write it again as per the linux or other os library availability)

12. How Java program works?

Hello.java (Windows)
------------------
System.out.println("Hello World"); (Source Code)    
    -> Compile (javac Hello.java) 
    -> Hello.class (Bytecode) 
    -> JVM (Java virtual Machine - Windows) 
    -> show("Hello World") -> Windows Instruction set to print something 
    -> Hello World (output)

Hello.java (Linux)
----------------------
System.out.println("Hello World"); (Source Code)    
    -> Compile (javac Hello.java) 
    -> Hello.class (Bytecode) 
    -> JVM (Java virtual Machine - Linux) 
    -> display("Hello World") -> Linux Instruction set to print something 
    -> Hello World (output)


13. Bytecode is platform independent.
14. Bytecode is only understood by JVM (Java Virtual Machine)
15. JVM is a hypothetical machine which understand bytecode and responsible to execute it on any platform.
16. Java is platform independent as it uses JVM and java code is executed by JVM but JVM itself is a platform dependent.
17. In 2009 Sun Microsystems is adopted by Oracle.

Environment Setup
--------------------------
1. jdk (java develpment Kit) - As as developer
    - Java Libraries
    - Java Compiler, Interpretor and other utility program
    - Java docs (Removed from version - 8)

2. As as consumer
    - JVM (OS in-build)

3. Set the java utility path (c:\program files\java\jdkX.x\bin) into the environment variable to access the java utility globally in your system.

Other program / Software tools
-----------------
4. Editor -> A software used to write or edit your programs.
    - Notepad
    - Notepad++
    - textpad
    - Visual Studio Code (Recommanded)

5. IDE (Integrated Development Environment) -> Editor + Compiler + Interpretor + Other utility tools (Warning -> Don't use them)
    - Visual Studio Code
    - Ecllipse
    - Netbeans
    - Intellij Idea

Java Flavors
---------------------
    1. Java Standard Edition (Java SE) -> Core Java
    2. Java Enterprise Edition (Java EE) -> Web Application + Enterprise Application
    3. Java Mobile Edition (Java ME) -> Deprecated
        - These days for Mobile development Android, IOS (Native application envrionment are used).

Java Versions
-------------------
    1. Java 1.0 (1991)
      -Java 1.1 (1992)
    2. Java (jdk 1.2) (1993) -> Virtual Machine + (JIT -> Just in time) -> J2SE
    3. Java (jdk 1.3) -> J2SE
    4. Java (jdk 1.4) -> J2SE
    5. Java (jdk 1.5) -> J2SE
    6. Java (jdk 1.6) -> J2SE
    7. Java 7 -> Java SE
    8. Java 8
    9. Java 9
    ---------
    Java 21

OOPS
---------------
OOPS is a programming approach in which program is created with class and objects.

Object
------------
Any real world entity is called an object.
For ex: Pen, Car, mouse, keyboard, laptop, Account, Person, Student

Every object has some properties associated with it.

If `Person` is an object then properties are `name`, `age`, `height`, `gender`, `weight`, `address`

If `Student` is an object then properties are `student_id`, `class`, `degree`, `college`, `university`

If `Car` is an object then properties are `model`, `price`, `color`, `engine_capacity`, `fuel_type`, `brand`, `max_speed`, `mileage`

Along with the properties every object has some behavior / Operations also.

For example: 
If `Car` is an object then the operations are `start`, `stop`, `accelrate`, `turn`, `change-gear`, `break`

class 
--------------
class is a group of objects which have similar type of properties. Object is the snapshot / instance of a class.

--------------------------------------------------------
Create in Java Program - Hello World
-----------------------------------------------------
1. create a class name HelloWorld
2. Save it into a filename HelloWorld.java
3. Edit your program.
4. Compile the program
    - javac <program-name>
    - javac HelloWorld.java
5. After successfull compilation .class file generated
    - HelloWorld.class (Byte code)
6. To run the program, call the java iterpretor (JVM) by using `java` command
    - java <.class name without .class extension>
    - java HelloWorld
7. Behind the Schene
    HelloWorld.java (Source code) -> Compiler -> HelloWorld.class (Bytecode) -> JVM (java HelloWorld) -> Interpretor -> Display Result

Important pointers
------------------------
1. Whenever you compile a java program, java compiler generate .class file for each class in your java program seperately.
2. While running your program you have to supply the .class name (withour extension).
3. Only those classes directly executed from the command line which have main method.
4. The class which have main method is known as `Application class` or `Main class`
5. If a class is `public`, then public class must be saved in a file with the same name of class name.
6. A file can have only single public class.

-----------------------------------------
Command line Usage
------------------------------------------
1. Open the command line
    - Start menu -> search cmd -> press enter
2. To navigate withing directories
    - CD(Change directory)
        - cd <directory name or path>
    - cd .. (Move into the parent directory)
    - cd . (Move into the current directory)
    - cd \ (Move into the root directory)
    - d: (change the drive with d:)

Today's Exercise Question
---------------------------------
1. Write a program to find the sum of two numbers
2. Write a program to find the average of two numbers


Operator
---------------
1. a = 5 + 10 ---> Expression
2. + and = are the operators
3. 5, 10, and a are the operands or argument

Type of operators
------------------------
1. Unary Operator (one arg. ex: -5)
2. Binary Operator (two arg. ex: 5 + 6)
3. Ternary Operator (3 arg: ?:)

Type of operator as per the operations
---------------------------------------------
1. Arithmetic Operator
2. Assignment Operator
3. Relational Operator
4. Logical Operator



1. Arithmetic Operator
------------------------------
+, -, *, /, %(Modulas) are the arithmetic operator

a) a + b * c
    1. -> b * c
    2. a + (Result step 1)


1. Rule of priority: It says that the operator which enjoy the higher priority will be executed first.

2. Rule of Association: Some operator are execute from Left to Right and some others are executed Right to Left. 
In case of Left to Right the operators are executes in Left to Right order.

    priority table
    ----------------    
        1. *, /, %      L to R
        2. +, -         L to R
Example: 
    a + b * c

Example
    a + b * c / d - e + f * g - h
      4.  1.  2.  5.  6.  3.  7.

Rules for the arithmetic Expression
---------------------------------------
1. int - int -> int
2. float - float -> float
3. float - int -> float
4. int - float -> float
-----------------------------------

Example
---------------
5 / 2 -> 2
5.0 / 2 -> 2.5
5 / 2.0 -> 2.5
5.0 / 2.0 -> 2.5

2 / 5 -> 0
2.0 / 5 -> 0.4
2 / 5.0 -> 0.4
2.0 / 5.0 -> 0.4

5 / 0 -> ArithmeticException: / by Zero
5.0 / 0 -> +Infinity
-5.0 / 0 -> -Infinity

---------------------------------------------------

int a;                  System.out.println(a);
a = 5 / 2;              2
a = 5.0 / 2;            2(C/C++), JAVA - Error
a = 5 / 2.0;            Error
a = 2 / 5               0
a = 2.0 / 5             Error

----------------------------------------------------

double d;               System.out.println(d)
d = 5 / 2;              2
d = 5.0 / 2;            2.5
d = 2 / 5;              0
d = 2.0 / 5;            0.4
------------------------------------------------------

Modulas / Mod Operator
-------------------------
% returns the remainder

5 % 2 -> 1
2 % 5 -> 2
----------------------

How Mod and divide works?
-------------------------------
22 / 5 -> 4
22 % 5 -> 2

Examples:
--------------
7 % 5 -> 2
-7 % 5 -> -2;
7 % -5 -> 2
-7 % -5 -> -2
3.4 % 2 -> In C/ C++ floating point values with % operator are not allowed but allowed in java.
        -> 1.4

---------------------------------------------------

Exercise
---------------
1. Get an amount then your program should print the possible indian
domainants

amount = 21347

2000 x 10 = 20000
500 x 2 = 1000
100 x 3 = 300
50 x 0 = 0
20 x 2 = 40
10 x 0 = 0
5 x 1 = 5
2 x 1 = 2
1 x 0 = 0

2. Enter time in hours
    304 hours
    Hours -> ?
    Minutes -> ?
    Seconds -> ?

-----------------------------------------------

Assignmet operator (=) -> R To L, Very LOW 
----------------------------------------------
Move the value to a variable from R To L.

Example:
    a = 5;
    b = a + 2;
    c = b;

    a = b = 5;    

Example:
    5 = 2; // Error
    5 = a; // Error
    5 = a + 2; // Error
    a + 2 = 5;
Note: On the left hand side of assignment operator always there should be a variable. otherwiser it would be a compile time error.

-------------------------------------------------------------------

Steps of Learning English
------------------------------
1. Alphabets ->  Words -> Sentance -> Paragraph

Steps of Learning JAVA
-------------------------------
1. Character Set -> Keyword / Constant / Variables/ Opeators -> Instruction -> Program

-------------------------------------------------------------------

Character Set
-----------------
    Allowed set of charaters in JAVA.
    
    1. Alphabets -> A - Z/ a - z
    2. Digits -> 0 - 9
    3. White Spaces -> spaces, tabs, new lines
    4. Special Symbols -> , ; - _ @ #

Keywords
------------
Keywords are those which meaning is already reserved by the language (JAVA). So these words are also know as `Reserved words`.

1. In java, there are 50 keywords.
2. 2 keywords are deprecated that are goto and const are Deprecated now.
3. 3 more reserved words that are not keywords but reserver by JAVA. 
    true, false, null

Constant
------------
    a = b + 5; -> In this expression, 5 is a constant and a,b are variables.

Constant -> is an entity which never change during the program execution.

Types of Constants
--------------------
1. Integer Constant -> Only integeral values, No decimal values
    ex: 5, -5 , 0, 2345

    Rules
    -----------
    0. Decimal values are not allowed
    1. +ve / -ve
    2. No Decimal points
        Example: 2.0, 2.
    3. Spaces and special symbol are not allowed
        Example: 32,456 (wrong) , 32456(right) , 32_456(Right -> After java 7)
    4. Range:
            -2147483648 to 2147483647
    5. Format:
        0b0000_0000_0000_0101(binary)
        0156 (octal)
        0x65AF (hex)
2. Deciaml Constant
        Ex: 5.5, 9.3, 0.5678, 9.1234
    Rules
    -----------------
        1. Decimal values are allowed
        2. +ve / -ve
        3. Spacies and special symbols are not allowed
            1.3 4567(wrong), 1.34567(correct), 1.34,5678(wrong)
        4. Format
            Fixed Format (0.0007)
            Exponent Format (0.7E-3) => 0.7 x 10^-3
                0.7 => Mantisaa
                -3 => Exponent
        
3. Charater Constant
        Ex: 'A', 'Z', '$', '#' or any other character constant
        Ex: 'AZ'(wrong), '$A'(wrong)
    Rules:
    --------
        1. Character constant must be a single character
        2. It must be enclosed in single quotes.
        3. Character constant can be written in multiple ways
            'A' (Direct Single Character)
            '\u0065' (Unicode)
        4. 5 -> 0101, 'A' => Binary?
        5. How characters will be converted to binary. So there will be a unique numeric value associated with each character. This is represented by Character Encoding.
            Character Encoding
            ----------------------
                1. ASCII (American standard code for information interchange)
                    - 256 characters covered into ASCII
                    - Range: 0 - 255
                2. Unicode
                    - covers 65536 character
                    - Range 0 - 65535 
                    - First 256 characters are same as ASCII.
                    - 0         255                65535
                       ---Ascii---                    
                       ----------------Unicode----------

            Characters              ASCII/Unicode
            -------------------------------- 
            A - Z                   65 - 90
            a - z                   97 - 122
            0 - 9                   48 - 57
            Space                   32
            Enter                   13
            Smile                   1

4. String Constant - Group of characters
    Ex: "Alex", "alex@email.com", "JKLO89076F"
    Rules:
    ---------
        1. String constant must be enclose in double quotes.
5. Boolean Constants
    Ex: true, false
    Rules:
    -------
        1. Only true and false are considered boolean constants.
        2. false != 0
        3. true != 1

Binary Conversion
-----------------------
    -Decimal Number System (0 - 9)
        134

        1           3              4
      10^2         10^1           10^0

    (1 * 100) +   (3 * 10)  +     (4 * 1)

    position in decimal number system
    10000        1000       100     10    1
    -------------------------------------------------
    - Binary Number System (0 -1)

    0           1              0           1
   2^3          2^2            2^1         2^0
  (0 * 8) +     (1 * 4)   +    (0 * 2)  +  (1 * 1)
    0       +       4       +   0       + 1         => 5

    position in binary number system
    256    128    64    32    16    8    4    2    1
----------------------------------------------------------------
Example: 17 => Binary equivalent of 17 ?
    256    128    64    32    16    8    4    2    1
                               1    0    0    0    1                             


Example: 39 => Binary equivalent of 39 ?
    256    128    64    32    16    8    4    2    1
                        1      0    0    1    1    1           


Example: 1011011 => what it is in decimal

256    128    64    32    16    8    4    2    1
               1    0      1    1    0   1    1
               64 +  0   + 16 +  8 + 0 + 2  +  1   => 91

Octal Number System (0-7)
    8^3    8^2    8^1    8^0

Hexadecimal Number System (0-9, A - F)
    16^4    16^3    16^2    16^1    16^0
    1          1    1       1       1

Variable:
------------------
    1. age = 10;
       age = age + 5;

    Variable is an entity which can be changed during the program execution.

    2. Variable is the name of the memory place where data is stored and keep changing.

    3. Varialbe is a cup of tea.

Types of Variable:
--------------------
    Depends on the type of the value(constant) that is going to store in that variable.

    age = 10; // Integer variable
    price = 99.65; // Float variable
    gen = 'M'; // Character Variable
    name = "Alex"; // String variable
    isClassOn = true; // Boolean variable

Creating a variable
----------------------
    1. int age = 10;
    2. int age; 
           age = 10;
    3. int a, b, c, d;
    4. int a; int b; int c; int d;
    5. int a,
            b,
            c,
            d;

    
    
    Identifiers (Varible name / Constant name / Class name / Method name)

    Rules for creating Identifier(variable) names
    -----------------------------------
    1. Variable name can contain Alphabets(A-Z/a-z), Digits(0-9), Underscore(_), Doller($).
    2. Variable name can't start with digit.
    3. Spaces and special symbols are not allowed.
    4. Variable names can't be reserved words.
        int void; (Not allowed)
        int true; (Not Allowed)
    5. Varible name should be meaningful.
    6. Java is a case sensitive language so age, Age, AGE all are different variables.

    --------------------------------------
    Conventions
    --------------------------------------
    1. Class Name/Interface Name -> MyFirstClass
    2. variable name -> myFirstClass (camelCase)
    3. Method name -> myFirstMethod
    4. Constant Name: -> NO_OF_JAVA_SESSION, MIN_AGE, MAX_AGE

    Examples:
    ------------
    Correct             Incorrect
    ----------          -------------
    price               777price
    fatherName          father name
    father_name         00__fatherName
    currency$           int    
    $currency
    __AX
    intnum
    integer(Not Good practice)
              
Data types
-------------------
1. Scalar Data Type / Primitive Data Type
2. Referential Data Type / Secondary Data type
    - Class & Interface are considered as referetial data type

Primitive Data type
-----------------------
    byte
        - 1 byte Memory
        - Range: -128 to 127 (Byte.MIN_VALUE to Byte.MAX_VALUE)
    short
        - 2 byte Memory
        - Range: -32768 to 32767 (Short.MIN_VALUE to Short.MAX_VALUE)
    int
        - 4 byte Memory
        - Range: -2147483648 to 2147483647 (Ingeger.MIN_VALUE to Integer.MAX_VALUE)
    long
        - 8 byte Memory
        - Range: 9223372036854775808 to 9223372036854775807 (LONG.MIN_VALUE to Long.MAX_VALUE)

    float
        - 4 byte memory
        - Range: 1.4 E -45 to 3.4 E 38 (Float.MIN_VALUE to Float.MAX_VALUE)
        - Precision: 6 digit
    double
        - 8 byte memory
        - Range: 4.9 E -324 to 1.7 E 308 (Double.MIN_VALUE to Double.MAX_VALUE)
        - Precision: 15 digits

        Example: 0.000000000001290
    char
        - 2 byte Memory
        - Range: 0 to 65535 (Character.MIN_VALUE to Character.MAX_VALUE)
        - Unsigned

        Example: 
            char ch = 'A';
            char ch = 65;
            char ch = -90; (Not allowed)
    
    boolean
        - Memory - N/A (It will depend on the JVM)
        - true, false

Memory Measurment
-----------------------
    1. 1 bit            -           0 / 1
    2. 1 byte           -           8 bits
    3. 1 KB             -           1024 (Byte) -> 2^10 Bytes
    4. 1 MB             -           1024 KB -> 2^20 bytes
    5. 1 GB             -           1024 MB -> 2^30 bytes
    6. 1 TB             -           1024 GB -> 2^40 bytes
    7. 1 PentaByte
    8. 1 HexaByte

How to calculate the range
-----------------------------------
    
How Binary Number system built in
--------------------------------------
0000           ->          0
0001           ->          1
0010           ->          2
0011           ->          3
0100           ->          4
0101           ->          5
0110           ->          6
0111           ->          7
1000           ->          8
1001           ->          9
1010           ->          10
1011           ->          11
1100           ->          12
1101           ->          13
1110           ->          14
1111           ->          15
-----------------------------------------

    1          ->           2 (2 ^ 1)
    2          ->           4 (2 ^ 2)  
    3          ->           8 (2 ^ 3)
    4          ->           16 (2 ^ 4)

    N          ->           (2 ^ N)
-------------------------------------------

1 byte -> (8 bits) -> 2 ^ 8 pairs are possible
------------------------------------------------
0000 0101 =>        0       000 0001
               (sign bit)   (data bits)    

        +ve    2^7 Pairs
        -ve    2^7 Pairs

    Byte Range: -2^7 to 2^7-1

2. Short Range: -2^15 to 2^15-1
3. Int Range: -2^31 to 2^31-1
4. Long Range: -2^63 to 2^63-1

Note: Float / Double range can't be calculate as similar to the above.

unsigned byte a; 0 to 2^8-1 (0 to 255)
With unsigned, only +ve values are allowed but in the same memory space we can store the double values.

Note: In java, unsigned is not a keyword and not allowed to create a variable unsigned. But In java character values are always unsigned.

operators
------------------
    1. Arithmetic operators
    ---------------------------------
        +, - , *, /, %
    
    Rules for the Arithmetic Expression
    ------------------------------------
    1. Rule Of Priority
    2. Rule Of Associativity
    3. int - int -> int, float - float -> float, int - float -> float
    4. In java only widening is allwoed but narrowing is not allowed by default.
        byte < short < int < long < float < double
        -------------------------------------------> Widening
Narrowing <-------------------------------------------

        Example:
        -----------------
        1.    int a = 5;
            byte b = a; // Compile time error

        2. int a = 5;
            byte b;
            b = (byte)a; // OK

        3. float f;
            f = 3.0; // Error: Narrowing, double to float.
            f = 3.0f; // OK

Note: By default every floating point constant is treated as double. To treat it float suffix with `f`. Here `f` is called modifier.
    Example: 3.0 (Double), 3.0f(float)

Note: By default every integer constant is `int` to treat it `long` suffix with `l`. Here `l` is a modifier.
    Example:   3(int), 3l(long)

        4. int i = 2147483648; // Error, number is too large
            long l = 2147483648; // Error, number is too large
            long l = 2147483648l; // OK

        5. byte b = 5;
            s.o.p(b); // 5, OK
Note: If an integer is withing the range of lower data type than integer means (byte, short) then it works fine. But out of range values promts compile time error.
        6. byte b;
        b = 130; // Error

        7. int i = 125;
            byte b;
            b = i; // Error,Narrowing, int to byte
            s.o.p(b);
        8. byte a = 5, b = 6;
            byte c = a + b; Error, Becoz of Narrowing.
            s.o.p(c);
Note: When byte, short are invloved in any arithmetic expression then they are promoted to int first and then arithmetic is performed so the output will always belongs from int.
        9. byte a = 5, b = 6;
            byte c = (byte)(a + b);
            s.o.p(c);

        10. short s = 65;
            char c = 65;
Note: Even char and short both occupy 2 bytes of memory but the conversion from char to short or short to char are not allowed as char don't expect any -ve values.    


    2. Assignment Operator (=)
    --------------------------------
    Precedence -> Very low
    Association -> R to L
    --------------------------
    a = 5;
    b = a;
    c = a + b;
----------------------------------------------
    c = b = a = 5; // R to L
---------------------------------------------------------
    5 = a; // Error, Lvalue Required
    5 + a = b; // Error, Lvalue Required
--------------------------------------------------


Compound Assignment
-----------------------
    +=, -=, *=, /= , %=

    a += 5          a = a + 5
    a -= 5          a = a - 5
    a *= 5          a = a * 5
    a /= 5          a = a / 5
    a %= 5          a = a % 5

-------------------------------------------------
Example:
    byte b = 5;
    b = b + 2; // Error, conversion int to byte
    s.o.p(b);

Example:
    byte b = 5;
    b += 2;
    s.o.p(b); // 7

Note:
    In case of shorthand operator, the typecasting is automatically performed.

Unary Operator
---------------------
    +, -, ++, --, typecast

Example:
    -5, Here - is a unary operator.

    Increment(++) / Decrement(--) Operator
    -----------------------------------------
    - These operator comes into two Flavors
        - Postfix
        - Prefix
    
        Prefix                  |               Postfix
    --------------------------------------------------------------
1.  int a = 5;                  |           int a = 5;
    ++a;  ------------>     a = a + 1;   <----- a++;
    s.o.p(a); //6               |           s.o.p(a); // 6

2. int a = 5, b;                |       int a = 5, b;
    b = ++a; //a = a + 1; b = a;|       b = a++; // b = a; a = a + 1;
    s.o.p(a+", "+b);6 , 6       |       s.o.p(a + ", " + b); 6, 5        
--------------------------------------------------------------------

Example:
-------------
    int a = 5, b = 6, c;
    c = ++a * ++b;
    s.o.p(a, b, c);// 6 7 42

    int a = 5, b = 6, c;
    c = a++ * b++;
    s.o.p(a, b, c);//6 7 30

    int a = 3, b = 4, c;
    c = ++a * b++;
    s.o.p(a, b, c); // 4, 5, 16

    int a = 3;
    b = ++a * ++a; // 4 * 5
    s.o.p(a, b); // 5, 20

    s.o.p(++5); // 5 = 5 + 1; , Error 

    byte b = 3;
    b = b + 1; // Error, int to byte
    s.o.p(b);

    byte b = 3;
    b++; // b = b + 1; // OK
    s.o.p(b); // 5

Note: In case of shorthand operator typecast is automatically performed.

Typecasting
------------------
    type2 = (type2) type1;


Relational Operator (Boolean operators)
-----------------------------
    >           -       Greater than
    <           -       Less than
    >=          -       Greater or Equal
    <=          -       Less or Equal
    ==          -       Equality
    !=          -       Not Equal   
    instanceof  -       User with class and object

    It is used to compare two or more values and return the result in  boolean means true or false.

    5 > 2   -> true
    5 < 2   -> false

    5 == '5' -> false
    5 == "5" -> Error: Can't convert string to int
    3 == 3.0 -> true

     

Logical operators
--------------------------
!           &&          ||
(Not)       (AND)       (OR)

1. && and || operator are used to combine two or more conditions(Relations).
    Example:
    -------------
        age > 18 && gender == 'm'
        age > 18 || gender == 'm' 
2. Each condition can be true or false then what will be the final output of expression combined by && or ||.
3. The final result of expression is computed by a truth table.
4. Truth table it the combination of conditions and their result.

    c1      c2          c1 && c2            c1 || c2
    --------------------------------------------------
    F       F           F                   F
    F       T           F                   T
    T       F           F                   T
    T       T           T                   T


Examples:
------------
    Example-1:
    --------------
    int a = 5, b = 6, c;
    c = a > 2 && b > 3; // Error, can't convert boolean to int
    s.o.p(a, b, c);

    Example-2:
    ------------------
    int a = 5, b = 6;
    boolean c;
    c = a > 2 && b > 3; 
    s.o.p(a, b, c); // 5, 6, true

    Example-3:
    ---------
    5 > 3 > 1 => true > 1 => Error, boolean to int converstion

    Example-4:
    5 > 3 &&  3 > 1 -> true


    Example-5:
    -----------
    int a = 5, b = 6;
    boolean c;
    c = a > 2 && b > 3;
    s.o.p(a, b, c); //5, 6, true

    Example-6:
    int a = 5, b = 6;
    boolean c;
    c = a < 3 && b > 2;
    s.o.p(a,b,c); // 5, 6, false

    Example-7:
    s.o.p(4 && 5); // Error

    Example-8: (Short circuit behavior)
    -------------
    int a = 3, b = 4;
    boolean c = a > 5 && ++b > 2;
    s.o.p(a,b,c); 3, 4, false

    Example-9:
    ------------
    int a = 3, b = 4;
    boolean c = a > 5 || ++b > 2;
    s.o.p(a,b,c);// 3, 5, true

Not operator(!)
----------------------
    C       !C
    -----------------
    T       F
    F       T

    Example-10:
        int a = 10;
        boolean b = !a; // Error, int to boolean
        s.o.p(a, b); 

    // !a => !10 => // Error, int to boolean


    Example-11:
        int a = 10;
        boolean b = !(a > 2);
        s.o.p(a, b); 10 false

    Example:12
        n => between 5 to 10
        int n = 11;
        boolean result = n >= 5 && n <= 10
        s.o.p(result); false

    Example:13
        create a range that is not between 50 to 100
        int n = 11;
        boolean result = !(n >= 50 && n <= 100)
            OR
        boolean result = n < 50 || n > 100;

Complement Relation
--------------------------
!>          <=
!<          >=
!>=         <
!<=         >
!!=         ==
