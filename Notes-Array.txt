Array -> Homogenous collection of data
---------------
age1, age2, age3, age4, age5  
name1, name2, name3, name4, name5
        0      1     2     3    4  ---> Index    
     ------------------------------
age  | 29  |  35  | 42  | 55  | 21
     ------------------------------


age[0] => 29
age[2] => 42


Array is the fixed length collection of data. It stores similar type of elements in continuous memory locations.
All the array elements shares the common name but each element is uniquely identified by its index or subscript. So array is also known as subscript variable.


int x = 5;

    5001        
    --------------------------------------------
x   |0000 0000 0000 0000 0000 0000 0000 0101   | 
    --------------------------------------------


        0      1     2     3    4  ---> Index    
     ------------------------------
age  | 29  |  35  | 42  | 55  | 21
     ------------------------------
     100    104     108   112   116 -> Address    

How data is accessed from array.
----------------------------------------
age[3]
    100 + 3 * 4

    BaseAddress + index * size => Address of index
-------------------------------------------------------------

        100         104     108     112     116                         
        -----------------------------------------
    arr |   1   |   2   |   3   |   4   |   5   |
        -----------------------------------------
            1       2       3       4       5    

            100 + (4 - 1) * 4 => 112

    Address(I) = Base Address + (I - LB) * Size;
                                

    arr -> 100 (base address)
    arr[i] = *(arr + i) = *(i + arr) = i[arr]
    arr[0] = *(arr + 0) = *arr(Base value) => arr (Base Address)

    arr[1] = *(arr + 1)

Note: In java array is an object with a property called `length` which returns the length of the array.


Creating an array
---------------------------
    1. Creating reference variable:
        int arr[];
        int[] arr; // Recommanded
        int arr[10]; // Invalid

        int[] a, b; // both are int[]
        int a[], b; // a is int[] and b is of type int.

    2. Creating array object
    ---------------------------
        arr = new int[5];

    3. Both in single step
    --------------------------
    int[] arr = new int[5];
    int[] arr = new int[n]; // n = 10

Initialization of array
-----------------------------
    int[] arr = { 10, 20, 30 };
    int[] arr = new int[] { 10, 20, 30 };

Accessing array elements
-----------------------------
    [] (subscript operator) is used to access the array elements.

    System.out.print(arr[0]);
    System.out.print(arr[1]);
    System.out.print(arr[2]);
    System.out.print(arr[3]);
    System.out.pritn(arr[4]);

    arr[0] + arr[4];

Accessing element using loop
-------------------------------------
    for(int i = 0; i < 5; i++) {
        System.out.print(arr[i]);
    }

    for(int i = 0; i < arr.length; i++) {
        System.out.print(arr[i]);
    }

---------------------------------------

Exercise:
-------------
1.    Circular Shift the array elements by one.
        arr -> {10, 20, 30, 40, 50}
        arr -> {20, 30, 40, 50, 10}

2. Shuffle the array elements

3. Insert an element in an unsorted array.

    Example: insert item 34 at position 3.

    Before: 12, 4 , 5, 17, 88
    After: 12, 4, 34, 5, 17, 88


    int[] arr = new int[20];

4. print the horizontal histogram for an array.
    4,6,9,3,5

    ****
    ******
    *********
    ***
    *****

5. Print the vertical histogram
    4,6,9,3,5

    * * * * *
    * * * * *
    * * * * *
    * * *   *
      * *   *
      * *
        *
        *
        *
6. Print the reverse vertical histogram (Like: Vertical Line graph)
-------------------------------------------------------------------

Limitations of Array
---------------------------
1. Array size is fixed Or Array is a fixed length collection. so shortage or wastage is possible.

    int[] arr = new int[100];

2. Insertion of deletion needs shifting.
    10,20,30,40,50
         |-> -> ->
    Insert 25 => 10,20,25,30,40,50

    10,20,30,40,50
             <- <-      
    Delete 30 => 10,20,40,50

--------------------------------------------
2-D Array
--------------------------------------------
     0   1   2   3    4  5  6
 0   70, 98, 88, 77, 66,76, 89 => Class-1
 1   87, 76, 56, 54, 90, 89, 98 => Class-2
 2   78, 76, 90, 87, 76, 55, 67 => Class -3

2-D Array is the collection of various 1-D Array. Each element in 2-D array have two index - 1. Row index and 2. Col index

arr[1][2] => 56


Creating 2-D array
-------------------------
    1. Creating reference variable.
        int[][] arr1, arr2; // Both are 2-D Array (Recommanded)
        int arr[][], b; // arr is a 2-D array and b is an integer
        int[] arr[], b; // arr is a 2-d array and b is a 1-D array
        int arr[3][4]; // Error, size is not allowed with reference variable.

    2. Creating an object
        --------------------
            arr = new int[3][4];
    3. Both in single step
        --------------------
            int[][] arr = new int[3][4];

intialization of 2-D array
-----------------------------
    int[][] arr = {{1,2,3}, {2,3,4}, {3,4,5}};
    int[][] arr = new int[][] {{1,2,3}, {2,3,4}, {3,4,5}};

Accessing 2-D Array
-------------------------
                  0        1        2    
                0 1 2
int[][] arr = {{1,2,3}, {2,3,4}, {3,4,5}};


for(int i = 0; i < arr.length; i++) {
    for(int j =0; j < arr[i].length; j++) {
        System.out.print(arr[i][j])
    } 
    System.out.println();
}

----------------------------------------
Exercise Questions
--------------------------------------------

1. Find the sum of each row
2. Find the sum of each column
3. Transpose the matrix
    M1 -> {             // 3 * 4
        {1,2,3,4},
        {2,3,4,5},
        {3,4,5,6}
    }

    M2 -> {{1,2,3}, {2,3,4}, {3,4,5}, {4,5,6}} // 4 * 3

------------------------------------------------------------------------
3-D Array
---------------
    Collection of various 2-D array
    { 
        {{1,2,3}, {2,3,4} , {3,4,5}}
        {{1,2,3}, {2,3,4} , {3,4,5}}
        {{1,2,3}, {2,3,4} , {3,4,5}}
    }

Creating 3-D Array
-------------------------
    int[][][] arr = new int[2][3][4];

initialization
----------------------
    int[][][] = {   i
                    0 => {
                       j  0 1 2 3 => k 
                       0 {1,2,3,4}, 
                       1 {2,3,4,5}, 
                       2 {3,4,5,6}
                    },
                    1 => {
                        0 {4,5,6,7}, 
                        1 {5,6,7,8}, 
                        2 {6,7,8,9}
                    } => 1
                }

Access
------------            2
    for(int i = 0; i < arr.length; i++) {
        for(int j = 0; j < arr[i].length; j++) {
            for(int k = 0; k < arr[i][j].length; k++) {
                System.out.println(arr[i][j][k]);
            }
        }
    }


Ragged Array / Variable length array
-------------------------------------

int[][] arr = new int[4];

arr[0] = new int[5];
arr[1] = new int[3];
arr[2] = new int[7];
arr[3] = new int[2];
arr = [][]{
        [0]=> {0,0,0,0,0},
        [1]=> {0, 0, 0},
        [2]=> {0, 0, 0, 0, 0, 0 , 0},
        [3]=> {0, 0}
    }
Note:

As Array is an object in java and all the array elements are initialized with default value.


Copying arrays
-----------------------
int[] a = {1,2,3};
int[] b;

b = a;

Note: 
When we try to assign a reference varaible into another reference variable. It only make a copy of references don't create an object.
So this kind of copy is know as `Shallow Copy` and resultant both of the reference variable will point the same object.

Exercise
------------
Reverse an array
-----------------------
    arr = {1, 2, 3, 4, 5}; Before reverse
    arr = {5, 4, 3, 2, 1}; After Reverse

Method calls
------------------
1. Call by value:
    Whenever we call a method the copy of value  is passed to the method defination and in method execution if copy is change original parameter doesn't affected.

2. Call by reference
------------------------
    Whenever we pass a reference variable in a method call, only the reference copy is passed no new object will be creted. so both(method call & method defination) of the reference variable refers to the same object. and any changes in an object will reflect both of the places.
    This is called call by reference.

Note:
    In java all the method call with primitive will be used as call by value.

    and all the method call with object will be used as call by Reference.


----------------------------------------------
// Copying array values (deep copy / cloning)
int[] arr = {1, 2, 3, 4, 5};
int[] b = new int[arr.length];

for(int i = 0; i < arr.length; i++) {
    b[i] = a[i];
}

-------------------------------------
Exercise: 
    Fix the swap method and enable it in such a way that actual parameter should be swapped.

foreach loop

varargs