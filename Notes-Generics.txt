Generics - Introduced in java-5
--------------------

What is Generics?
-----------------------
It allows you to write reusable classes, interface and methods that can
be run with multiple types and ensure the type safety.

Note: Generic type only can be classes and interfaces.

Generic Classes / Interface
--------------------
1. Create box class using Object - Not able to be Type Safe
2. Create box class using Generic - Type safety introduced

Generic Methods
--------------------
 Example: print() - Should be able to print any type of array.

Bounds - Bounded Type Variable
-------------------------------
T2 add(T1 a, T2 b) {
    return a + b;
}

add(5,4.5); // Double
add(5, "Hello"); // String
add(new Circle(5), new Rectangle(10,4)); // 

Upper bound
----------------
List<? extends Number>
List<? extends Animal>

Lower bound
--------------
List<? super Integer>

Wildcard
--------------
Wildcard adds the flexiblity while working with generics

1. ? represent and unknown type.
2. ? extends Type, is a way to create upper bound.
3. ? super Type, is a way to create lower bound.
4. If no type is given for the replacement of ?, it becomes Object as 
work same as it work before introducing generics.
5. Unbounded wildcards
	example:
		processList(List<?> list) {
		}


Type Erasure
--------------
1. Generics in java uses type erasure, means the type parameter is 
removed on complile time.
2. Type parameter is replace with upper bound (or Object if no 
upper bound)
3. It ensure the backword compatility by replacing the type parameter
with Object if no type is specified.