java.util.Arrays
------------------------------
void sort(primitiveType[] array) : quick sort
void sort(primitiveType[] array, int startIndex, int endIndex)
void sort(Object[] array): quicksort
void parallelSort(primitiveType[] array): Merge sort (parallel sorting algorithm)

Examples:
1.
    int[] numbers = {5, 2, 8, 1, 3};
    Arrays.sort(numbers);

2.
    String[] names = {"Alice", "Bob", "Charlie", "David"};
    Arrays.sort(names);


void fill(primitiveType[] array, primitiveType value)
    int[] numbers = new int[5];
    Arrays.fill(numbers, 42);

void fill(primitiveType[] array, int fromIndex, int toIndex, primitiveType value)
    int[] numbers = new int[5];
    Arrays.fill(numbers, 1, 4, 42);

boolean equals(primitiveType[] array1, primitiveType[] array2)
    int[] array1 = {1, 2, 3};
    int[] array2 = {1, 2, 3};
    boolean areEqual = Arrays.equals(array1, array2);

String toString(primitiveType[] array)
    int[] numbers = {1, 2, 3, 4, 5};
    String arrayString = Arrays.toString(numbers);

primitiveType[] copyOf(primitiveType[] original, int newLength)
    int[] source = {1, 2, 3};
    int[] destination = Arrays.copyOf(source, source.length);

primitiveType[] copyOfRange(primitiveType[] original, int from, int to)
    int[] source = {1, 2, 3, 4, 5};
    int[] destination = Arrays.copyOfRange(source, 1, 3);

int compare(primitiveType[] array1, primitiveType[] array2)
    int[] array1 = {1, 2, 3};
    int[] array2 = {1, 2, 4};
    int result = Arrays.compare(array1, array2);

int binarySearch(primitiveType[] array, primitiveType key)
    int[] numbers = {1, 2, 3, 4, 5};
    int index = Arrays.binarySearch(numbers, 3);

int binarySearch(primitiveType[] array, int fromIndex, int toIndex, primitiveType key)
    int[] numbers = {1, 2, 3, 4, 5};
    int index = Arrays.binarySearch(numbers, 1, 4, 3);

int mismatch(primitiveType[] array1, primitiveType[] array2)
    int[] array1 = {1, 2, 3};
    int[] array2 = {1, 2, 4};
    int mismatchIndex = Arrays.mismatch(array1, array2);