OOPS (Object Oriented Programming Structure): 
    It is a programming approach / Paradigm in which program is created with objects (class).

What is the Object:
-----------------------
Object is a real world entity which have some properties / behaviors (actions) associated with it.

For example: if car is an object the properties are...
    model, make, price, color, brand, maxspeed, currentSpeed, number_of_gears and many more...

    and behaviors associated with the car are...
    start(), stop(), accelarate(), break(), turn(), changeGear()


What is the class?
------------------------
1. Class is the group of objects which have similar properties.

2. Class is a template / blue print which have all the instructions that how object will behave and what properties object have.

3. Object is the instance(screenshot) of the class whereas class is the description of the object.

4. class is a logical entity which physical representation is realized by an object.

5. Once a class is crated it becomes a data type which variables are called an object.

6. class is a combination of `data` as well as `operations` that can be performed on that data.
This way class defined an encapsulation.

7. Abstraction - Hides the internal details fro the external user. Methods defines first level of Abstraction as the user of the method don't need to know that how the operation is performed. Only he need to learn that how to use the method.

Creating a class 
-----------------------
    class <class Name> {
        member

        returntype method1() {

        }
        returntype method2() {

        }
    }


Example:
    class Circle {

    }
Creating an object
------------------------
    2 step process
    -------------------->
        1. Creating reference variable
        -------------------------------
        Circle c1;
        Circle c1, c2, c3;

        2. Creating an object
        ----------------------
            c1 = new Circle();
            c2 = new Circle();

        3. Both in single step
        ------------------------
            Circle c1 = new Circle();


Primitive Varaible V/S Reference varaible
----------------------------------------------
    A variable is a cup of tea.
1. A primitive variable is a cup of tea which contains the binary value of a variable. Means a primitive variable itself contains data.

2. A reference variable doesn't contains object data, it have a way to send the instruction to the object.

    For example - If reference variable is a cup of tea then it contains remote control to send the instruction to the object but it doesn't contains the object data.

-------------------------------------------------
Default value for the class members
----------------------------------------
integeral -> 0
real (float, double) -> 0.0
boolean -> false
char -> \u0000 (0)
Object -> null


Exercise Question
-------------------------
Q1) Enter a month and year and find the 1 day of that month-year.
Q2) Create a class `BankAccount` with the following members...
    accountNumber
    accountHolderName
    balance

    deposit(int amount)
    withdraw(int amount)
    getBalance()
    getAccountInfo()
--------------------------------------------------

`this` variable

class Person {
    private String name;
    private int age;

   public void setAge(int a) {
        if(a > 0 && a < 100) {
            age = a;
        } else {
            age = 1;
        }
   }

   public void setName(String n) {
        name = n;
   }

   public int getAge() {
    return age;
   }

   public String getName() {
       return name;
   }

   public void display() {
    System.out.println(name+"  is " + age + " years old");
   }
}


Person p1 = new Person();

---p1---           
    |
    |
    --------------------
        name = null
        age = 0
    ---------------------

Person p2 = new Person();

---p2---
    |
    |
    --------------------
        name = null
        age = 0
    ---------------------


1. p1.name, p1.age
2.  void setName(n, this) {
        this.name = n;
    }

    p1.setName("Alex",p1);
    |                 |  
    ------------------|

---p1---          ----this--             
    |                   |
    |                   |
    ----------------------
        name = null
        age = 0
    -----------------------

`this` is a variable inside the class which refere to the current object.

whenever an object make a call to the method, the copy of the referece is automatically passed as an agrument and this copy is received by this variable inside the method definition and all the members of the class are automatically prefixed with `this.`. This is called implicit use of `this` variable.

This way all members belogs to the current object as `this` variable have the copy of current object reference.


If the name of the local member and the class member becomes same then the local member hides the class member. the feature is known as `Instance member hiding`.

In this situation, to differentiate the class member from the local member we must prefix the class member with `this.`. It is called explicit use of this variable.

void setName(String name) {
    this.name = name;
}


----------------------------

class Person {
    private String name;
    private int age;

   public void setAge(int age) {
        if(age > 0 && age < 100) {
            this.age = age;
        } else {
            this.age = 1;
        }
   }

   public void setName(String name) {
        this.name = name;
   }

   public int getAge() {
    return age;
   }

   public String getName() {
       return name;
   }

   public void display() {
    System.out.println(name+"  is " + age + " years old");
   }
}

--------------------------------------------------------------
Constructors
--------------------------------------------------------------
Person p1 = new Person();

1. Constructor is a special method which name is same as the class Name and it is called when an object is created.
2. Constructor is used to intialize the class members.
3. Generally constructor is defined with public access.
4. Constructor don't have any return type even void.
5. A class can have multiple constructor with different parameters means constructor overloadding is allowed.
6. If we don't create any constructor in our class then JVM supplies a default constructor in our class. 
7. If we create any one constructor in our class then JVM stop the supply of default constructor.
8. You can create the object only with the available constructor in the class.

class Circle {
    private int radius;

    

    public Circle(int radius) {
        this.radius = radius;
    }

    void setRadius(int radius) {
        this.radius = radius;
    }
}

Circle c1 = new Circle(); // radius = 1
c1.setRadius(5);

Circle c2 = new Circle(3);

-------------------------------

Type of Constructors
--------------------------------------------------------------------
1. Default Constructor / No Parameter Constructor
2. Parameterized Constructor
3. Copy Contructor