OOPS (Object Oriented Programming Structure): 
    It is a programming approach / Paradigm in which program is created with objects (class).

What is the Object:
-----------------------
Object is a real world entity which have some properties / behaviors (actions) associated with it.

For example: if car is an object the properties are...
    model, make, price, color, brand, maxspeed, currentSpeed, number_of_gears and many more...

    and behaviors associated with the car are...
    start(), stop(), accelarate(), break(), turn(), changeGear()


What is the class?
------------------------
1. Class is the group of objects which have similar properties.

2. Class is a template / blue print which have all the instructions that how object will behave and what properties object have.

3. Object is the instance(screenshot) of the class whereas class is the description of the object.

4. class is a logical entity which physical representation is realized by an object.

5. Once a class is crated it becomes a data type which variables are called an object.

6. class is a combination of `data` as well as `operations` that can be performed on that data.
This way class defined an encapsulation.

7. Abstraction - Hides the internal details fro the external user. Methods defines first level of Abstraction as the user of the method don't need to know that how the operation is performed. Only he need to learn that how to use the method.

Creating a class 
-----------------------
    class <class Name> {
        member

        returntype method1() {

        }
        returntype method2() {

        }
    }


Example:
    class Circle {

    }
Creating an object
------------------------
    2 step process
    -------------------->
        1. Creating reference variable
        -------------------------------
        Circle c1;
        Circle c1, c2, c3;

        2. Creating an object
        ----------------------
            c1 = new Circle();
            c2 = new Circle();

        3. Both in single step
        ------------------------
            Circle c1 = new Circle();


Primitive Varaible V/S Reference varaible
----------------------------------------------
    A variable is a cup of tea.
1. A primitive variable is a cup of tea which contains the binary value of a variable. Means a primitive variable itself contains data.

2. A reference variable doesn't contains object data, it have a way to send the instruction to the object.

    For example - If reference variable is a cup of tea then it contains remote control to send the instruction to the object but it doesn't contains the object data.

-------------------------------------------------
Default value for the class members
----------------------------------------
integeral -> 0
real (float, double) -> 0.0
boolean -> false
char -> \u0000 (0)
Object -> null


Exercise Question
-------------------------
Q1) Enter a month and year and find the 1 day of that month-year.
Q2) Create a class `BankAccount` with the following members...
    accountNumber
    accountHolderName
    balance

    deposit(int amount)
    withdraw(int amount)
    getBalance()
    getAccountInfo()
--------------------------------------------------

`this` variable

class Person {
    private String name;
    private int age;

   public void setAge(int a) {
        if(a > 0 && a < 100) {
            age = a;
        } else {
            age = 1;
        }
   }

   public void setName(String n) {
        name = n;
   }

   public int getAge() {
    return age;
   }

   public String getName() {
       return name;
   }

   public void display() {
    System.out.println(name+"  is " + age + " years old");
   }
}


Person p1 = new Person();

---p1---           
    |
    |
    --------------------
        name = null
        age = 0
    ---------------------

Person p2 = new Person();

---p2---
    |
    |
    --------------------
        name = null
        age = 0
    ---------------------


1. p1.name, p1.age
2.  void setName(n, this) {
        this.name = n;
    }

    p1.setName("Alex",p1);
    |                 |  
    ------------------|

---p1---          ----this--             
    |                   |
    |                   |
    ----------------------
        name = null
        age = 0
    -----------------------

`this` is a variable inside the class which refere to the current object.

whenever an object make a call to the method, the copy of the referece is automatically passed as an agrument and this copy is received by this variable inside the method definition and all the members of the class are automatically prefixed with `this.`. This is called implicit use of `this` variable.

This way all members belogs to the current object as `this` variable have the copy of current object reference.


If the name of the local member and the class member becomes same then the local member hides the class member. the feature is known as `Instance member hiding`.

In this situation, to differentiate the class member from the local member we must prefix the class member with `this.`. It is called explicit use of this variable.

void setName(String name) {
    this.name = name;
}


----------------------------

class Person {
    private String name;
    private int age;

   public void setAge(int age) {
        if(age > 0 && age < 100) {
            this.age = age;
        } else {
            this.age = 1;
        }
   }

   public void setName(String name) {
        this.name = name;
   }

   public int getAge() {
    return age;
   }

   public String getName() {
       return name;
   }

   public void display() {
    System.out.println(name+"  is " + age + " years old");
   }
}

--------------------------------------------------------------
Constructors
--------------------------------------------------------------
Person p1 = new Person();

1. Constructor is a special method which name is same as the class Name and it is called when an object is created.
2. Constructor is used to intialize the class members.
3. Generally constructor is defined with public access.
4. Constructor don't have any return type even void.
5. A class can have multiple constructor with different parameters means constructor overloadding is allowed.
6. If we don't create any constructor in our class then JVM supplies a default constructor in our class. 
7. If we create any one constructor in our class then JVM stop the supply of default constructor.
8. You can create the object only with the available constructor in the class.

class Circle {
    private int radius;

    

    public Circle(int radius) {
        this.radius = radius;
    }

    void setRadius(int radius) {
        this.radius = radius;
    }
}

Circle c1 = new Circle(); // radius = 1
c1.setRadius(5);

Circle c2 = new Circle(3);

-------------------------------

Type of Constructors
--------------------------------------------------------------------
1. Default Constructor / No Parameter Constructor
2. Parameterized Constructor
3. Copy Contructor

Calling other constructor of same class from a constructor.
-----------------------------------------------------------------
1. Use of this() method
    - Used to call the other constructor of same class.



**************************************
    Method Overloadding
**************************************

sum(int x, int y)
sum(int x, int y, int z)
sum(float x, float y)
sum(float x, float y, float z)
sum(int x, float y)
sum(float x, int x)

------------------------------
sum(4,5);
sum(4,5,6);
sum(4.4f, 5.4f, 6.4f);

******************************************
`Method Overloadding` allows you to create multiple methods with the same name but different parameters.

Methods of Overloadding
-----------------------------
1. Number of Parameter
    sum(int, int)
    sum(int, int, int)
2. Type of parameter
    sum(int, int)
    sum(float, float)
3. Order of parameter
    sum(int, float)
    sum(float, int)

---------------------------------
    int div(int a, int b) {
        return a / b;
    }

    float div(int a, int b) {
        reutrn (float)a / b;
    }

Note: div method is not a correct way of overloadding as method overloadding is only allowed based on the parameters not return type.

-----------------------


Instance and Static Data members
------------------------------------

class  A {
    private int x;
    private static int y;
}

A a1 = new A();
A a2 = new A();
A a3 = new A();
---------------------
    - JVM look for the A.class that it exists in the memory or not. If not then it loads A.class into the memory.
    - All the static member of A.class will receive the memory as class is loaded.
        y = 0;
    - After that object `a1` receives the memory and initialize its instance members;
        a1----> -----------
                    x = 0
                -----------
        a2----> -------------
                    x = 0;
                --------------
        a3-----> ------------
                    x = 0;
                --------------

Instance member variable
-------------------------------
    Instance member variables are those which receives the memory inside the each object and there will be as many copies of instance member as number of objects.

    Instance members receives the memory when an object is created.

Static member variable (class variable)
-----------------------
    Static member variables are those which receive the memory outside the object and there will be only one copy of static member irrespective of number of objects.

    Static member receive the memory when class is loaded into the memory.


Note:
    The program which is running is called process.

Process space
-----------------
    1. Stack => Local varaibles
    2. Heap => Store the objects (that can be managed dynamically)
    3. constants 
    4. Global / Static 
    5. Code

Instance and static methods
--------------------------------
Instance methods
    - Instance methods are those which can be called through the object.
    - Instance methods can use instance and static both members directly.

Static methods
    - Static methods are those which can be called without any object through the class name.
        Math.pow(2,3);
    - Static method can't use the instance variable. It can only use static varaible directly.



Note:
Method operates on Data and Data can be supplied to the method by two ways...

1. Through the object
2. Through the parameter

--------------------------------
1. Through the object
    class Circle {
        private int radius;

        public Circle(int radius) {
            this.radius = radius;
        }

        public void computeArea() {
            return Math.PI * this.radius * radius;
        }
    }

    Circle c1 = new Circle(10); -> c1(radius = 10)
        c1.computeArea();

2. Through the parameter
    ---------------------
        public int sum(int x, int y) {
            return x + y;
        }

        sum(5,6);

Note:
    If method operates on object's data then it should be instance method 
    If method operates on paramter's data then it should be static method.

Note:
    Within the static context `this` variable is not allowed.

Note:
    Unfortunetly static member can be called through the object also.

Note:
    Static method can't use the instance variable. It can only use static varaible directly.

    class Utility {
        private int a,b;
        public static int sum(int x, int y) {
            return x + y;
        }    

        public static int max(int x, int y) {
            return x > y ? x : y;
        }

        public static float avg(int x , int y) {
            return (x + y) / 2.0f;
        }

        public static void display(int x, int y) {
            System.out.println(a + " "+ b + " " + x + " " + z);
        }

        public void show(int x, int y) {
            System.out.println(a + " "+ b + " " + x + " " + z);
        }
    }

    Utility.display(10,15);

    Utility obj = new Utility(); // a = 0, b = 0
    obj.show(10,20);

Exercise
-----------
Create a Java class called Employee to model employee information. Each employee has the following attributes:

employeeId (int)
firstName (String)
lastName (String)
salary (double)

Include the following methods in the Employee class:

- A constructor to initialize the employee's attributes.
- getFullName(): This instance method should return the full name of the employee (i.e., first name + last name).
- getAnnualSalary(): This instance method should calculate and return the annual salary by multiplying the monthly salary by 12.
- raiseSalary(double percentage): This instance method should increase the employee's salary by the specified percentage.

Additionally, create a static attribute and method for the Employee class:

- totalEmployees (int, static): This static attribute should keep track of the total number of employees created.
- getTotalEmployees(): This static method should return the total number of employees